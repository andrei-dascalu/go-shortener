// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcserve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerServiceClient is the client API for ShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerServiceClient interface {
	Short(ctx context.Context, in *ShortRequest, opts ...grpc.CallOption) (*ShortResponse, error)
	ShortMany(ctx context.Context, opts ...grpc.CallOption) (ShortenerService_ShortManyClient, error)
}

type shortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerServiceClient(cc grpc.ClientConnInterface) ShortenerServiceClient {
	return &shortenerServiceClient{cc}
}

func (c *shortenerServiceClient) Short(ctx context.Context, in *ShortRequest, opts ...grpc.CallOption) (*ShortResponse, error) {
	out := new(ShortResponse)
	err := c.cc.Invoke(ctx, "/grpcserve.ShortenerService/Short", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerServiceClient) ShortMany(ctx context.Context, opts ...grpc.CallOption) (ShortenerService_ShortManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShortenerService_ServiceDesc.Streams[0], "/grpcserve.ShortenerService/ShortMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &shortenerServiceShortManyClient{stream}
	return x, nil
}

type ShortenerService_ShortManyClient interface {
	Send(*ShortRequest) error
	Recv() (*ShortResponse, error)
	grpc.ClientStream
}

type shortenerServiceShortManyClient struct {
	grpc.ClientStream
}

func (x *shortenerServiceShortManyClient) Send(m *ShortRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shortenerServiceShortManyClient) Recv() (*ShortResponse, error) {
	m := new(ShortResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShortenerServiceServer is the server API for ShortenerService service.
// All implementations must embed UnimplementedShortenerServiceServer
// for forward compatibility
type ShortenerServiceServer interface {
	Short(context.Context, *ShortRequest) (*ShortResponse, error)
	ShortMany(ShortenerService_ShortManyServer) error
	mustEmbedUnimplementedShortenerServiceServer()
}

// UnimplementedShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServiceServer struct {
}

func (UnimplementedShortenerServiceServer) Short(context.Context, *ShortRequest) (*ShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Short not implemented")
}
func (UnimplementedShortenerServiceServer) ShortMany(ShortenerService_ShortManyServer) error {
	return status.Errorf(codes.Unimplemented, "method ShortMany not implemented")
}
func (UnimplementedShortenerServiceServer) mustEmbedUnimplementedShortenerServiceServer() {}

// UnsafeShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServiceServer will
// result in compilation errors.
type UnsafeShortenerServiceServer interface {
	mustEmbedUnimplementedShortenerServiceServer()
}

func RegisterShortenerServiceServer(s grpc.ServiceRegistrar, srv ShortenerServiceServer) {
	s.RegisterService(&ShortenerService_ServiceDesc, srv)
}

func _ShortenerService_Short_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServiceServer).Short(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserve.ShortenerService/Short",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServiceServer).Short(ctx, req.(*ShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerService_ShortMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShortenerServiceServer).ShortMany(&shortenerServiceShortManyServer{stream})
}

type ShortenerService_ShortManyServer interface {
	Send(*ShortResponse) error
	Recv() (*ShortRequest, error)
	grpc.ServerStream
}

type shortenerServiceShortManyServer struct {
	grpc.ServerStream
}

func (x *shortenerServiceShortManyServer) Send(m *ShortResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shortenerServiceShortManyServer) Recv() (*ShortRequest, error) {
	m := new(ShortRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShortenerService_ServiceDesc is the grpc.ServiceDesc for ShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserve.ShortenerService",
	HandlerType: (*ShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Short",
			Handler:    _ShortenerService_Short_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShortMany",
			Handler:       _ShortenerService_ShortMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
